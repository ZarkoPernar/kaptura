{"version":3,"file":"1.bundle-10e360864e0e0f6ec7b9.js","sources":["webpack:///./src/web/invoices/Page.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { v4 as uid } from 'uuid'\r\nimport MdAdd from 'react-icons/lib/md/add-circle'\r\nimport { connect } from 'react-redux'\r\nimport { Route } from 'react-router-dom'\r\nimport { Observable } from 'rxjs/Observable'\r\n\r\nimport Box from '../shared/Box'\r\nimport Toaster from '../shared/toast/Toaster'\r\nimport Modal from '../shared/modal'\r\nimport Page from '../shared/Page'\r\nimport PageSubheader from '../shared/PageSubheader'\r\nimport PageBody from '../shared/PageBody'\r\nimport Button from '../shared/Button'\r\n\r\nimport List from './List'\r\nimport EditProjectForm from './Form'\r\nimport DeleteDialog from './DeleteDialog'\r\nimport PageFilters from './PageFilters'\r\nimport InvoiceDetail from './Detail'\r\nimport socketService from '../socket'\r\nimport createStoreListComponent from '../shared/StoreList'\r\n\r\nimport { storeItem } from './listReducer'\r\nimport { storeItem as rootStoreItem } from './reducer'\r\n\r\n@connect(state => ({ company: state.companyInfo.data }), {\r\n    addInvoiceAtRoot: payload => ({ payload, type: rootStoreItem.types.ADD_ITEM, }),\r\n    updateInvoiceAtRoot: payload => ({ payload, type: rootStoreItem.types.UPDATE_ITEM_SUCCESS, }),\r\n})\r\n@createStoreListComponent({\r\n    storeName: storeItem.name,\r\n    actions: storeItem.actions,\r\n    rootStoreItem\r\n})\r\nexport default class InvoicesPage extends Component {\r\n    state = {\r\n        forEdit: null,\r\n        forDelete: null,\r\n        isEditModalOpen: false,\r\n        isDeleteModalOpen: false,\r\n        pageSize: 25,\r\n        pageNumber: 1,\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.list()\r\n\r\n        this.create$$ = socketService.companySocket$\r\n            .mergeMap(socket => Observable.fromEvent(socket, 'invoice_create'))\r\n            .subscribe(this.props.addInvoiceAtRoot)\r\n\r\n        this.update$$ = socketService.companySocket$\r\n            .mergeMap(socket => Observable.fromEvent(socket, 'invoice_update'))\r\n            .subscribe(this.props.updateInvoiceAtRoot)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.create$$.unsubscribe()\r\n        this.update$$.unsubscribe()\r\n    }\r\n\r\n    applyFilters = (filters) => {\r\n        this.setState({\r\n            filters\r\n        }, this.list)\r\n    }\r\n\r\n    list = () => {\r\n        this.props.list({\r\n            filters: this.state.filters,\r\n            pages: {\r\n                pageSize: this.state.pageSize,\r\n                pageNumber: this.state.pageNumber,\r\n            }\r\n        })\r\n    }\r\n\r\n    submitProject = (project) => {\r\n        if (project._id === undefined) {\r\n            this.createProject(project)\r\n        } else {\r\n            this.updateProject(project)\r\n        }\r\n    }\r\n\r\n    createProject = (project) => {\r\n        this.dismiss()\r\n\r\n        const newProject = {\r\n            ...project,\r\n            _id: uid(),\r\n        }\r\n\r\n        this.props.add(newProject)\r\n            .catch(this.handleProjectError)\r\n\r\n    }\r\n\r\n    updateProject = (project) => {\r\n        this.dismiss()\r\n\r\n        this.setState({\r\n            forEdit: null,\r\n        })\r\n\r\n        this.props.update(project)\r\n            .catch(this.handleProjectError)\r\n    }\r\n\r\n\r\n    handleProjectError = (err) => {\r\n        this.setState({\r\n            toasts: {\r\n                description: err.message\r\n            }\r\n        })\r\n    }\r\n\r\n    _executeAfterModalClose = () => {\r\n        this.setState({\r\n            forEdit: null,\r\n            isEditModalOpen: false,\r\n        })\r\n    }\r\n\r\n    openProject = (project) => {\r\n        this.setState({\r\n            forEdit: project,\r\n            isEditModalOpen: true,\r\n        })\r\n    }\r\n\r\n    openNew = () => {\r\n        this.setState({\r\n            forEdit: null,\r\n            isEditModalOpen: true,\r\n        })\r\n    }\r\n\r\n    askForRemove = (project) => {\r\n        this.setState({\r\n            forDelete: project,\r\n            isDeleteModalOpen: true,\r\n        })\r\n    }\r\n\r\n    deleteConfirm = () => {\r\n        this.props.remove(this.state.forDelete)\r\n\r\n        this.setState({\r\n            isDeleteModalOpen: false,\r\n        })\r\n    }\r\n\r\n    deleteDismiss = () => {\r\n        this.setState({\r\n            forDelete: null,\r\n            isDeleteModalOpen: false,\r\n        })\r\n    }\r\n\r\n    toggleRemoval = () => {\r\n        this.setState(state => ({\r\n            allowRemoval: !state.allowRemoval\r\n        }))\r\n    }\r\n\r\n    dismiss = () => {\r\n        this.setState({ isEditModalOpen: false })\r\n    }\r\n\r\n    renderPage = () => {\r\n        return (\r\n            <Page name=\"Fakture\" hasSubheader>\r\n                <Toaster toasts={this.state.toasts} />\r\n\r\n                <PageSubheader>\r\n                    <PageFilters filters={this.state.filters} applyFilters={this.applyFilters} />\r\n                </PageSubheader>\r\n\r\n                <PageBody>\r\n                    {this.props.items.loading ? 'Loading...' : (\r\n                        this.props.error ? this.props.error.toString() : <List items={this.props.items} />\r\n                    )}\r\n                </PageBody>\r\n            </Page>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const forEdit = this.state.forEdit === null ? undefined : this.state.forEdit\r\n\r\n        return (\r\n            <Box>\r\n                <Route component={InvoiceDetail} path=\"/fakture/:itemId\" />\r\n                <Route render={this.renderPage} path=\"/fakture\" exact />\r\n            </Box>\r\n        )\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/web/invoices/Page.js"],"mappings":"AAAA","sourceRoot":""}