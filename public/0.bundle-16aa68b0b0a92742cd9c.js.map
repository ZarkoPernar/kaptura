{"version":3,"file":"0.bundle-16aa68b0b0a92742cd9c.js","sources":["webpack:///./src/web/projects/Page.js","webpack:///./~/scriptjs/dist/script.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { Observable } from 'rxjs/Observable'\r\nimport { v4 as uid } from 'uuid'\r\nimport MdAdd from 'react-icons/lib/md/add-circle'\r\nimport { connect } from 'react-redux'\r\nimport { Route } from 'react-router-dom'\r\n\r\nimport appStore from '../appStore'\r\nimport socketService from '../socket'\r\nimport Toaster from '../shared/toast/Toaster'\r\nimport Modal from '../shared/modal'\r\nimport Calendar from '../shared/calendar'\r\nimport Page from '../shared/Page'\r\nimport PageSubheader from '../shared/PageSubheader'\r\nimport PageBody from '../shared/PageBody'\r\nimport Button from '../shared/Button'\r\nimport Map from '../shared/Map'\r\n\r\nimport ProjectList from './ProjectList'\r\nimport EditProjectForm from './Form'\r\nimport DeleteProjectDialog from './DeleteProjectDialog'\r\nimport PageFilters from './PageFilters'\r\nimport ProjectTabs from './ProjectTabs'\r\n\r\nimport invoiceApi from '../invoices/api'\r\n\r\nimport createStoreListComponent from '../shared/StoreList'\r\n\r\nimport { storeItem } from './listReducer'\r\nimport { storeItem as rootStoreItem } from './reducer'\r\n\r\nimport './projekti.scss'\r\n\r\n@connect(state => ({ company: state.companyInfo.data }), {\r\n    addProjectAtRoot: payload => ({ payload, type: rootStoreItem.types.ADD_ITEM, }),\r\n    updateProjectAtRoot: payload => ({ payload, type: rootStoreItem.types.UPDATE_ITEM_SUCCESS, }),\r\n})\r\n@createStoreListComponent({\r\n    storeName: storeItem.name,\r\n    actions: storeItem.actions,\r\n    rootStoreItem\r\n})\r\nexport default class ProjectPage extends Component {\r\n    static defaultProps = {\r\n        items: [],\r\n        list: () => {},\r\n        add: () => {},\r\n        update: () => {},\r\n        remove: () => {},\r\n    }\r\n\r\n    state = {\r\n        projectForEdit: null,\r\n        projectForDelete: null,\r\n        isEditModalOpen: false,\r\n        isDeleteModalOpen: false,\r\n        pageSize: 25,\r\n        pageNumber: 1,\r\n        activeTab: 'List',\r\n        clientName: '',\r\n        projects: [],\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.getProjects()\r\n\r\n        this.create$$ = socketService.companySocket$\r\n            .mergeMap(socket => Observable.fromEvent(socket, 'project_create'))\r\n            .subscribe(this.props.addProjectAtRoot)\r\n\r\n        this.update$$ = socketService.companySocket$\r\n            .mergeMap(socket => Observable.fromEvent(socket, 'project_update'))\r\n            .subscribe(this.props.updateProjectAtRoot)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.create$$.unsubscribe()\r\n        this.update$$.unsubscribe()\r\n    }\r\n\r\n\r\n    applyFilters = (filters) => {\r\n        this.setState({\r\n            filters\r\n        })\r\n\r\n        this.props.list({\r\n            filters,\r\n        })\r\n    }\r\n\r\n    selectTab = (activeTab) => {\r\n        this.setState({\r\n            activeTab,\r\n        })\r\n    }\r\n\r\n    getProjects = () => {\r\n        this.props.list({\r\n            pages: {\r\n                pageSize: this.state.pageSize,\r\n                pageNumber: this.state.pageNumber,\r\n            }\r\n        })\r\n    }\r\n\r\n    nextPage = () => {\r\n        this.setState(state => ({ pageNumber: state.pageNumber + 1 }), this.getProjects)\r\n    }\r\n\r\n    prevPage = () => {\r\n        this.setState(state => ({ pageNumber: state.pageNumber - 1 }), this.getProjects)\r\n    }\r\n\r\n    submitProject = (project) => {\r\n        if (project._id === undefined) {\r\n            this.createProject(project)\r\n        } else {\r\n            this.updateProject(project)\r\n        }\r\n    }\r\n\r\n    createProject = (project) => {\r\n        this.dismiss()\r\n\r\n        const newProject = {\r\n            ...project,\r\n            _id: uid(),\r\n        }\r\n\r\n        this.props.add(newProject)\r\n            .catch(this.handleProjectError)\r\n\r\n    }\r\n\r\n    updateProject = (project) => {\r\n        this.dismiss()\r\n\r\n        this.setState({\r\n            projectForEdit: null,\r\n        })\r\n\r\n        this.props.update(project)\r\n            .catch(this.handleProjectError)\r\n    }\r\n\r\n\r\n\r\n    handleProjectError = (err) => {\r\n        this.setState({\r\n            toasts: {\r\n                description: err.message\r\n            }\r\n        })\r\n    }\r\n\r\n    _executeAfterModalClose = () => {\r\n        this.setState({\r\n            projectForEdit: null,\r\n            isEditModalOpen: false,\r\n        })\r\n    }\r\n\r\n    openProject = (project) => {\r\n        this.setState({\r\n            projectForEdit: project,\r\n            isEditModalOpen: true,\r\n        })\r\n    }\r\n\r\n    openNew = () => {\r\n        this.setState({\r\n            projectForEdit: null,\r\n            isEditModalOpen: true,\r\n        })\r\n    }\r\n\r\n    askForRemove = (project) => {\r\n        this.setState({\r\n            projectForDelete: project,\r\n            isDeleteModalOpen: true,\r\n        })\r\n    }\r\n\r\n    deleteConfirm = () => {\r\n        this.props.remove(this.state.projectForDelete)\r\n\r\n        this.setState({\r\n            isDeleteModalOpen: false,\r\n        })\r\n    }\r\n\r\n    deleteDismiss = () => {\r\n        this.setState({\r\n            projectForDelete: null,\r\n            isDeleteModalOpen: false,\r\n        })\r\n    }\r\n\r\n    toggleRemoval = () => {\r\n        this.setState(state => ({\r\n            allowRemoval: !state.allowRemoval\r\n        }))\r\n    }\r\n\r\n    createInvoice = () => {\r\n        invoiceApi.add({\r\n            _id: uid(),\r\n            project_id: this.state.projectForEdit._id,\r\n            user_id: this.state.projectForEdit.created_by,\r\n            client_id: this.state.projectForEdit.client_id,\r\n        })\r\n        this.dismiss()\r\n    }\r\n\r\n    dismiss = () => {\r\n        this.setState({ isEditModalOpen: false })\r\n    }\r\n\r\n    renderCalendar = (projects) => (\r\n        <Calendar items={projects} onEventChange={this.submitProject} />\r\n    )\r\n\r\n    renderList = (projects) =>  (\r\n        <ProjectList\r\n            projects={projects}\r\n            rowRemove={this.askForRemove}\r\n            rowClick={this.openProject}\r\n            pageNumber={this.state.pageNumber}\r\n            pageSize={this.state.pageSize}\r\n            nextPage={this.nextPage}\r\n            prevPage={this.prevPage} />\r\n    )\r\n\r\n    renderMap = () => {\r\n        return null\r\n    }\r\n\r\n\r\n    render() {\r\n        const projectForEdit = this.state.projectForEdit === null ? undefined : this.state.projectForEdit\r\n        const projects = this.state.projects.length ? this.state.projects : this.props.items\r\n\r\n        return (\r\n            <Page name=\"Projekti\" hasSubheader>\r\n                <Toaster toasts={this.state.toasts} />\r\n                <Modal isOpen={this.state.isEditModalOpen} onRequestClose={this._executeAfterModalClose}>\r\n                    <EditProjectForm\r\n                        project={projectForEdit}\r\n                        onSubmit={this.submitProject}\r\n                        createInvoice={this.createInvoice}\r\n                        onDismiss={this.dismiss} />\r\n                </Modal>\r\n\r\n                <Modal isOpen={this.state.isDeleteModalOpen}>\r\n                    <DeleteProjectDialog\r\n                        confirm={this.deleteConfirm}\r\n                        dismiss={this.deleteDismiss}\r\n                        project={this.state.projectForDelete} />\r\n                </Modal>\r\n\r\n                <PageSubheader>\r\n                    <ProjectTabs activeTab={this.state.activeTab} selectTab={this.selectTab} />\r\n\r\n                    <PageFilters filters={this.state.filters} applyFilters={this.applyFilters} />\r\n\r\n                    <Button flat color=\"primary\" onClick={this.openNew}>\r\n                        <MdAdd />\r\n                        Novi Projekt\r\n                    </Button>\r\n                </PageSubheader>\r\n\r\n\r\n                <PageBody>\r\n                    <Route render={() => this.renderList(projects)} path=\"/projekti\" exact />\r\n\r\n                    <Route render={() => this.renderCalendar(projects)} path=\"/projekti/kalendar\" />\r\n                </PageBody>\r\n\r\n                <Route render={() => (\r\n                    <Map\r\n                        locations={projects}\r\n                        center={this.props.company && this.props.company.position}\r\n                        height=\"calc(100vh - 128px)\" />\r\n                    )} path=\"/projekti/karta\" />\r\n            </Page>\r\n        )\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/web/projects/Page.js","/*!\n  * $script.js JS loader & dependency manager\n  * https://github.com/ded/script.js\n  * (c) Dustin Diaz 2014 | License MIT\n  */\n\n(function (name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(definition)\n  else this[name] = definition()\n})('$script', function () {\n  var doc = document\n    , head = doc.getElementsByTagName('head')[0]\n    , s = 'string'\n    , f = false\n    , push = 'push'\n    , readyState = 'readyState'\n    , onreadystatechange = 'onreadystatechange'\n    , list = {}\n    , ids = {}\n    , delay = {}\n    , scripts = {}\n    , scriptpath\n    , urlArgs\n\n  function every(ar, fn) {\n    for (var i = 0, j = ar.length; i < j; ++i) if (!fn(ar[i])) return f\n    return 1\n  }\n  function each(ar, fn) {\n    every(ar, function (el) {\n      return !fn(el)\n    })\n  }\n\n  function $script(paths, idOrDone, optDone) {\n    paths = paths[push] ? paths : [paths]\n    var idOrDoneIsDone = idOrDone && idOrDone.call\n      , done = idOrDoneIsDone ? idOrDone : optDone\n      , id = idOrDoneIsDone ? paths.join('') : idOrDone\n      , queue = paths.length\n    function loopFn(item) {\n      return item.call ? item() : list[item]\n    }\n    function callback() {\n      if (!--queue) {\n        list[id] = 1\n        done && done()\n        for (var dset in delay) {\n          every(dset.split('|'), loopFn) && !each(delay[dset], loopFn) && (delay[dset] = [])\n        }\n      }\n    }\n    setTimeout(function () {\n      each(paths, function loading(path, force) {\n        if (path === null) return callback()\n        \n        if (!force && !/^https?:\\/\\//.test(path) && scriptpath) {\n          path = (path.indexOf('.js') === -1) ? scriptpath + path + '.js' : scriptpath + path;\n        }\n        \n        if (scripts[path]) {\n          if (id) ids[id] = 1\n          return (scripts[path] == 2) ? callback() : setTimeout(function () { loading(path, true) }, 0)\n        }\n\n        scripts[path] = 1\n        if (id) ids[id] = 1\n        create(path, callback)\n      })\n    }, 0)\n    return $script\n  }\n\n  function create(path, fn) {\n    var el = doc.createElement('script'), loaded\n    el.onload = el.onerror = el[onreadystatechange] = function () {\n      if ((el[readyState] && !(/^c|loade/.test(el[readyState]))) || loaded) return;\n      el.onload = el[onreadystatechange] = null\n      loaded = 1\n      scripts[path] = 2\n      fn()\n    }\n    el.async = 1\n    el.src = urlArgs ? path + (path.indexOf('?') === -1 ? '?' : '&') + urlArgs : path;\n    head.insertBefore(el, head.lastChild)\n  }\n\n  $script.get = create\n\n  $script.order = function (scripts, id, done) {\n    (function callback(s) {\n      s = scripts.shift()\n      !scripts.length ? $script(s, id, done) : $script(s, callback)\n    }())\n  }\n\n  $script.path = function (p) {\n    scriptpath = p\n  }\n  $script.urlArgs = function (str) {\n    urlArgs = str;\n  }\n  $script.ready = function (deps, ready, req) {\n    deps = deps[push] ? deps : [deps]\n    var missing = [];\n    !each(deps, function (dep) {\n      list[dep] || missing[push](dep);\n    }) && every(deps, function (dep) {return list[dep]}) ?\n      ready() : !function (key) {\n      delay[key] = delay[key] || []\n      delay[key][push](ready)\n      req && req(missing)\n    }(deps.join('|'))\n    return $script\n  }\n\n  $script.done = function (idOrDone) {\n    $script([null], idOrDone)\n  }\n\n  return $script\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/scriptjs/dist/script.js\n// module id = 1223\n// module chunks = 0"],"mappings":"AAAA;;;;ACMA","sourceRoot":""}